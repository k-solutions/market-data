# This file was generated by the `rspec --init` command. Conventionally, all
# specs live under a `spec` directory, which RSpec adds to the `$LOAD_PATH`.
# Require this file using `require "spec_helper"` to ensure that it is only
# loaded once.
#
# See http://rubydoc.info/gems/rspec-core/RSpec/Core/Configuration
RSpec.configure do |config|
  config.treat_symbols_as_metadata_keys_with_true_values = true
  config.run_all_when_everything_filtered = true
  config.filter_run :focus

  # Run specs in random order to surface order dependencies. If you find an
  # order dependency and want to debug it, you can fix the order by providing
  # the seed, which is printed after each run.
  #     --seed 1234
  config.order = 'random'
end

STORAGE_TIME = Time.now.utc
NA = 'n/a'
STORAGE_PROC = lambda { |code| [ 0, code, code, code, NA, NA, NA, 
                                 STORAGE_TIME, STORAGE_TIME, STORAGE_TIME, 
                                 STORAGE_TIME, STORAGE_TIME, STORAGE_TIME, STORAGE_TIME, 
                                 '1,2,3,4,5', 2, ( ( code.size > 3 ) ? [ 'index' ] : [] ) ] }

def create_markets
  require_relative '../lib/utility/config'
  require_relative '../lib/markets/publisher'
  
  raise ArgumentError.new "No options to parse" unless ( options = Utility::Parser.get  Markets::Publisher::CONFIG_FILE,  Markets::Publisher::RAILS_ENV, true )
  
  options['subscriptions'].keys.inject( [] ) { |res, code| res << Markets::MarketStruct.new( *STORAGE_PROC.call( code ) ) }
end

def populate_market_storage ms
  if ( markets = create_markets )
    ms.add *markets
    puts "Markets stored: #{markets.map(&:code).join(', ')}"
  end
end

def init_market_storage
  require_relative '../lib/init'
  require_relative '../lib/markets/market_storage'
  ms = Markets::MarketStorage.instance # Markets.init_storage
  populate_market_storage ms if ms.keys.empty?
end

def init_celluloid
  require 'rubygems'
  require 'bundler/setup'
  require 'pry'
  require 'celluloid/autostart'
  
  logfile = File.open(File.expand_path("../../log/test.log", __FILE__), 'a')
  logfile.sync = true
  
  Celluloid.logger = Logger.new(logfile)
  Celluloid.shutdown_timeout = 3 
end

def init_shared
  Dir['./spec/support/*.rb'].map {|f| require f }
end

def init_channels init_test = false
  init_celluloid
  require_relative '../lib/supervisors/channels'
  if !Celluloid::Actor[ Channels::REDIS_PUBLISHER ] or !Celluloid::Actor[ Channels::REDIS_SUBSCRIBER ]
    supervisor = Supervisors::Channels.run!  
    init_shared
    supervisor.supervise_as :test_actor, TestActor if init_test and !Celluloid::Actor[ :test_actor ]
  elsif init_test and !Celluloid::Actor[ :test_actor ]
    TestActor.supervise_as :test_actor
  end
end
